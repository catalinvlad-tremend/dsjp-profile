<?php

/**
 * @file
 * Provides main functionality for dsjp_pledge module.
 */

use Drupal\block\Entity\Block;
use Drupal\block_content\BlockContentInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\group\Entity\GroupContentInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_theme().
 */
function dsjp_pledge_theme($existing, $type, $theme, $path) {
  return [
    'pledge_page_initiatives' => [
      'variables' => [
        'education' => [],
        'labour_force' => [],
        'ict_professionals' => [],
        'other' => [],
      ],
    ],
    'pledge_welcome' => [
      'variables' => [
        'content' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_field_group_form_process_alter().
 */
function dsjp_pledge_field_group_form_process_alter(array &$element, &$group, &$complete_form) {
  if ($element['#group_name'] == 'group_authoring_information' && $element['#bundle'] == 'dsj_pledge') {
    $element['#access'] = in_array('dsj_reviewer', \Drupal::currentUser()->getRoles());
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function dsjp_pledge_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($form_state->getFormObject()->getFormId() == 'node_dsj_pledge_initiative_form') {
    if ($context['items']->getName() == 'field_dsj_initiative_type') {
      $type = \Drupal::requestStack()->getCurrentRequest()->query->get('type');
      $element['value']['#default_value'] = $type;
    }
    if ($context['items']->getName() == 'field_dsj_pledge') {
      $pledge_id = \Drupal::requestStack()->getCurrentRequest()->query->get('pledge_id');
      $pledge = Node::load($pledge_id);
      if ($pledge instanceof NodeInterface) {
        $element['target_id']['#default_value'] = $pledge;
      }
    }
  }
  if ($context['items']->getName() == 'field_dsj_link' && isset($element['#bundle']) && $element['#bundle'] == 'dsj_organisation_contact') {
    $element['uri']['#title'] = t('Website');
  }
  if (in_array($context['items']->getName(), [
    'field_dsj_contact_name',
    'field_dsj_contact_email',
  ]) && $context['delta'] == 0 && $form_state->getFormObject()->getFormId() == 'group_dsj_organization_add_form') {
    $user = User::load(\Drupal::currentUser()->id());
    if ($context['items']->getName() == 'field_dsj_contact_name') {
      $first_name = $user->get('field_dsj_firstname')->value;
      $last_name = $user->get('field_dsj_lastname')->value;
      $element['value']['#default_value'] = $first_name . ' ' . $last_name;
    }
    else {
      $element['value']['#default_value'] = \Drupal::currentUser()->getEmail();
    }
  }
  if ($context['items']->getName() === 'entity_id' && $element['#entity_type'] = 'group_content') {
    $element['target_id']['#selection_handler'] = 'default:user_pledge_organization';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dsjp_pledge_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_dsj_pledge_initiative_form' || $form_id == 'node_dsj_pledge_initiative_edit_form') {
    $query = \Drupal::requestStack()->getCurrentRequest()->query;
    $node = $form_state->getFormObject()->getEntity();
    if (!empty($query->get('type'))) {
      $initiative_type = $query->get('type');
    }
    elseif (!$node->isNew()) {
      $initiative_type = $node->get('field_dsj_initiative_type')->value;
    }
    if (!empty($query->get('pledge_id'))) {
      $pledge_id = $query->get('pledge_id');
    }
    elseif (!$node->isNew()) {
      $pledge_id = $node->get('field_dsj_pledge')->target_id;
    }
    if (empty($initiative_type) || empty($pledge_id)) {
      \Drupal::messenger()->addWarning(t('Please create/edit the initiative from a pledge page.'));
    }
    $form['initiative_type'] = [
      '#type' => 'hidden',
      '#value' => $initiative_type,
    ];
    $form['field_dsj_action_type']['widget']['#ajax'] = [
      'callback' => 'dsjp_pledge_action_type_callback',
      'method' => 'replace',
    ];
    $form['field_dsj_pledge_methodology']['#prefix'] = '<div id="methodology-wrapper">';
    $form['field_dsj_pledge_methodology']['#suffix'] = '</div>';
    $form['field_dsj_performance']['#prefix'] = '<div id="performance-wrapper">';
    $form['field_dsj_performance']['#suffix'] = '</div>';
    $form['field_dsj_initiative_beneficiary']['#prefix'] = '<div id="beneficiary-wrapper">';
    $form['field_dsj_initiative_beneficiary']['#suffix'] = '</div>';
    $form['field_dsj_initiative_beneficiary']['#states'] = [
      'visible' => [
        ':input[name="field_dsj_action_type"]' => ['!value' => '_none'],
      ],
    ];
    $form['field_dsj_digital_skill_level']['#states'] = [
      'visible' => [
        ':input[name="field_dsj_action_type"]' => ['value' => 'training'],
      ],
    ];
    $form['field_dsj_pledge_methodology']['#states'] = [
      'visible' => [
        ':input[name="field_dsj_action_type"]' => [
          ['value' => 'training'],
          ['value' => 'placement'],
          ['value' => 'awareness_raising'],
          ['value' => 'courses_programmes'],
          ['value' => 'facilitating_development'],
        ],
      ],
    ];
    $form['field_dsj_performance']['#states'] = [
      'visible' => [
        ':input[name="field_dsj_action_type"]' => ['!value' => '_none'],
      ],
    ];
    $form['field_dsj_initiative_type']['#access'] = FALSE;
    $form['field_dsj_pledge']['#access'] = FALSE;
    $form['field_dsj_quantity']['#access'] = FALSE;

    if (!empty($form_state->getValues())) {
      $action = $form_state->getValue('field_dsj_action_type')[0]['value'];
    }
    elseif ($node) {
      $action = $node->field_dsj_action_type->value;
    }
    else {
      $action = '';
    }
    if (!empty($action)) {
      foreach (['field_dsj_pledge_methodology', 'field_dsj_performance'] as $field) {
        $options = $form[$field]['widget']['#options'];
        $new_options = ['_none' => t('None')];
        if (isset($options[$action])) {
          $new_options += $options[$action];
        }
        $form[$field]['widget']['#options'] = $new_options;
      }
    }
    $form['beneficiary_description'] = [
      '#type' => 'fieldset',
      '#weight' => 18,
      '#states' => [
        'visible' => [
          ':input[name="field_dsj_action_type"]' => ['!value' => '_none'],
        ],
      ],
      'description' => [
        '#markup' => _dsjp_pledge_get_initiative_markup($initiative_type),
        '#prefix' => '<div>' . t('@type - Beneficiaries.', [
          '@type' => Unicode::ucwords(str_replace('_', ' ', $initiative_type)),
        ]) . '</div>',
      ],
    ];
    array_unshift($form['#validate'], 'dsjp_pledge_validate_initiative_callback');
    $form['actions']['submit']['#submit'][] = 'dsjp_pledge_submit_initiative_callback';
  }
  elseif ($form_id == 'node_dsj_pledge_form' || $form_id == 'node_dsj_pledge_edit_form') {
    if ($form_id == 'node_dsj_pledge_form') {
      $form['actions']['submit']['#submit'][] = 'dsjp_pledge_submit_callback';
    }
    $form['field_dsj_payment_agreed']['#states'] = [
      'visible' => [
        ':input[name="field_dsj_pledges_activity_pay[value]"]' => ['checked' => TRUE],
      ],
    ];
    $block = \Drupal::entityTypeManager()->getStorage('block_content')->load(22);
    if ($block instanceof BlockContentInterface) {
      $build = \Drupal::entityTypeManager()->getViewBuilder('block_content')->view($block);
      $build['#weight'] = -10;
      $form['description'] = $build;
    }
  }
}

/**
 * Gets the beneficiary text to be displayed.
 *
 * @param string $type
 *   Initiative type.
 *
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup
 *   The text to be displayed.
 */
function _dsjp_pledge_get_initiative_markup($type) {
  $label = $item = '';
  switch ($type) {
    case 'ict_professionals':
      $label = t('All ICT Professionals');
      break;

    case 'other':
      $label = t('All Citizen');
      break;

    case 'education':
      $label = t('All Education Sector Participants');
      break;

    case 'labour_force':
      $label = t('All Labour Force Sector Participants');
      break;
  }
  return t('Please select the beneficiaries of this action type and insert the target number for each beneficiary. If the action type is applicable to all beneficiaries or individual beneficiaries cannot be quantified, please select “@label” only and enter the target number on the right.', [
    '@label' => $label,
  ]);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dsjp_pledge_form_group_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $group = \Drupal::routeMatch()->getParameter('group');
  if ($group instanceof GroupInterface && strpos($form_id, 'group_content_group_content_type') !== FALSE) {
    $groupContent = $form_state->getFormObject()->getEntity();
    if ($groupContent instanceof GroupContentInterface && $groupContent->getGroupContentType()->getContentPluginId() == 'group_node:dsj_pledge') {
      $form['actions']['submit']['#submit'][] = 'dsjp_pledge_submit_organization_callback';
    }
  }
}

/**
 * Submit callback for organization group.
 */
function dsjp_pledge_submit_organization_callback(array &$form, FormStateInterface $form_state) {
  $entity = $form_state->getValue('entity_id');
  if (!empty($entity[0]['target_id'])) {
    $node = Node::load($entity[0]['target_id']);
    if ($node instanceof NodeInterface && $node->bundle() == 'dsj_pledge') {
      $group = \Drupal::routeMatch()->getParameter('group');
      if ($group instanceof GroupInterface) {
        $group->set('field_dsj_is_pledger', TRUE);
        $group->save();
        Cache::invalidateTags(['node:' . $node->id()]);
      }
    }
  }
}

/**
 * Submit callback for pledge content type add form.
 */
function dsjp_pledge_submit_callback(array &$form, FormStateInterface $form_state) {
  $group = \Drupal::routeMatch()->getParameter('group');
  if ($group instanceof GroupInterface) {
    $group->set('field_dsj_is_pledger', TRUE);
    $group->save();
  }
}

/**
 * Validation callback for pledge initiative.
 */
function dsjp_pledge_validate_initiative_callback(array &$form, FormStateInterface $form_state) {
  $pledge = $form_state->getValue('field_dsj_pledge');
  $type = $form_state->getValue('field_dsj_initiative_type');
  if (empty($pledge[0]['target_id']) || empty($type[0]['value'])) {
    $form_state->setErrorByName('field_dsj_pledge', t('Unable to create initiative without a pledge relationship.'));
  }
  $beneficiaries = $form_state->getValue('field_dsj_initiative_beneficiary');
  $quantity = 0;
  $valid = FALSE;
  if (!empty($beneficiaries)) {
    foreach ($beneficiaries as $beneficiary) {
      if ($beneficiary['status'] == 1) {
        $quantity += $beneficiary['number'];
        if ($beneficiary['number'] > 0) {
          $valid = TRUE;
        }
      }
    }
  }
  if (!$valid) {
    $form_state->setErrorByName('field_dsj_beneficiary', t('Your initiative should contain at least 1 beneficiary'));
  }
  else {
    $form_state->setValue(['field_dsj_quantity', 0, 'value'], $quantity);
  }
}

/**
 * Submit callback for pledge initiative.
 */
function dsjp_pledge_submit_initiative_callback(array &$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  Cache::invalidateTags(['node:' . $node->get('field_dsj_pledge')->target_id]);
  $form_state->setRedirect('entity.node.canonical', ['node' => $node->get('field_dsj_pledge')->target_id]);
}

/**
 * Ajax request for methodology replacement.
 */
function dsjp_pledge_action_type_callback(array &$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $form_state->setRebuild();
  $response->addCommand(new ReplaceCommand("#methodology-wrapper", $form['field_dsj_pledge_methodology']));
  $response->addCommand(new ReplaceCommand("#performance-wrapper", $form['field_dsj_performance']));
  $response->addCommand(new ReplaceCommand('#beneficiary-wrapper', $form['field_dsj_initiative_beneficiary']));

  return $response;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dsjp_pledge_preprocess_facets_item_list(&$variables) {
  if (isset($variables['facet']) && $variables['facet']->id() == 'dsj_is_pledger') {
    foreach ($variables['items'] as &$items) {
      if ($items['#title']['#raw_value'] == 1) {
        $items['#title']['#value'] = t('Pledger');
      }
      else {
        $items['#title']['#value'] = t('Member');
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function dsjp_pledge_node_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->bundle() == 'dsj_pledge_initiative') {
    if (\Drupal::currentUser()->id() != $entity->getOwnerId() || $operation == 'view') {
      return AccessResult::forbidden();
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dsjp_pledge_preprocess_node_add_list(&$variables) {
  if (isset($variables['types']['dsj_pledge_initiative'])) {
    unset($variables['types']['dsj_pledge_initiative']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dsjp_pledge_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-pledges-page') {
    $form['#prefix'] = '<h2 class="ecl-u-type-heading-2">' . t('Filter your results') . '</h2>';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dsjp_pledge_preprocess_bef_links(&$variables) {
  if (isset($variables['element']['#name']) && $variables['element']['#name'] == 'initiative_type') {
    if (isset($variables['children'][0])) {
      unset($variables['children'][0]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dsjp_pledge_preprocess_views_view(&$variables) {
  if ($variables['view']->id() == 'pledges' && $variables['view']->current_display == 'user_pledges') {
    $url = _dsjp_pledge_get_add_pledge_url() ?? Url::fromRoute('view.groups.user_pledge_organisations', [
      'user' => \Drupal::currentUser()->id(),
    ]);

    $variables['add_pledge_url'] = $url->toString();
    $variables['empty'] = t("If you can't find the content that you are looking for, create a new pledge for one of your organisations @link.", [
      '@link' => Link::fromTextAndUrl(t('here'), $url)->toString(),
    ]);
  }
}

/**
 * Helper function to generate the url to add Pledge.
 *
 * @return \Drupal\Core\Url|null
 *   Return Url to add a new Pledge node.
 */
function _dsjp_pledge_get_add_pledge_url() {
  $url = NULL;
  /** @var \Drupal\group\GroupMembership[] $memberships */
  $memberships = \Drupal::service('group.membership_loader')
    ->loadByUser(\Drupal::currentUser());
  if (!empty($memberships)) {
    foreach ($memberships as $membership) {
      if ($membership->getGroup()->getGroupType()->id() == 'dsj_organization') {
        $url = Url::fromRoute('entity.group_content.create_form', [
          'group' => $membership->getGroup()->id(),
          'plugin_id' => 'group_node:dsj_pledge',
        ]);
        break;
      }
    }
  }

  return $url;
}

/**
 * Set dynamic allowed values for the pledge methodology field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function dsjp_pledge_methodology_field_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $values = [
    'training' => [
      'online' => t('Online'),
      'face_to_face' => t('Face-to-face'),
      'online_face_to_face' => t('Online & Face-to-face'),
    ],
    'placement' => [
      'scholarship' => t('Scholarship'),
      'internship' => t('Internship'),
      'traineeship' => t('Traineeship'),
    ],
    'awareness_raising' => [
      'events' => t('Events'),
      'publications' => t('Publications'),
      'other' => t('Other'),
    ],
    'courses_programmes' => [
      'supporting_development' => t('Supporting the development of courses'),
      'providing_access' => t('Providing access to courses'),
    ],
    'facilitating_employment' => [
      'job_matching' => t('Job matching'),
      'certification' => t('certification'),
      'examination' => t('Examination'),
    ],
  ];

  return $values;
}

/**
 * Set dynamic allowed values for the organisation subcategory field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function dsjp_pledge_subcategory_field_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  return [
    'policy_maker' => [
      'local_regional' => t('Local/ Regional'),
      'national' => t('National'),
      'european' => t('European'),
    ],
    'training_provider' => [
      'ict_provider' => t('ICT Training provider'),
      'non_ict_provider' => t('Non-ICT Training provider'),
    ],
    'education_provider' => [
      'primary_education' => t('Primary Education provider'),
      'secondary_education' => t('Secondary Education provider'),
      'tertiary_education' => t('Tertiary Education provider'),
      'vocabulary_education' => t('Vocational Education provider'),
    ],
    'industry_partner' => [
      'itc_company' => t('ITC Company'),
      'non_itc_company' => t('Non-ITC Company'),
      'business_association' => t('Business Association'),
      'professional_association' => t('Professional Association'),
      'trade_union' => t('Trade Unions'),
    ],
    'society_other' => [
      'ngo' => t('NGO'),
      'employment_platforms' => t('Employment Platforms'),
      'digital_innovation' => t('Digital Innovation Hubs'),
      'living_labs' => t('Living Labs'),
      'other' => t('Other'),
    ],
  ];
}

/**
 * Set dynamic allowed values for the pledge performance field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function dsjp_pledge_performance_field_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $values = [
    'training' => [
      'people_trained' => t('Number of people trained'),
      'people_certified' => t('Number of people certified'),
    ],
    'placement' => [
      'people_placed' => t('Number of people placed'),
    ],
    'awareness_raising' => [
      'people_reached' => t('Number of people reached'),
    ],
    'courses_programmes' => [
      'courses' => t('Number of courses'),
    ],
    'facilitating_employment' => [
      'matched_jobs' => t('Number of matched jobs'),
      'certificates_issued' => t('Number of certificates issued'),
      'examinations_corrected' => t('Number of examinations corrected'),
    ],
    'collaboration' => [
      'collaborating_partners' => t('Number of collaborating partners'),
    ],
  ];

  return $values;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dsjp_pledge_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->bundle() == 'dsj_pledge' && isset($variables['content']['content_moderation_control'])) {
    $initiatives = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
      'field_dsj_pledge' => $variables['node']->id(),
      'type' => 'dsj_pledge_initiative',
    ]);
    $variables['content']['content_moderation_control']['submit']['#prefix'] = t('Note that in order to submit a pledge, you have to create at least one initiative');
    $variables['content']['content_moderation_control']['submit']['#value'] = t('Submit');
    if (empty($initiatives)) {
      $variables['content']['content_moderation_control']['submit']['#attributes']['disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_block_access().
 */
function dsjp_pledge_block_access(Block $block, $operation, AccountInterface $account) {
  if ($block->id() == 'pledgeinitiatives' && (\Drupal::routeMatch()->getRouteName() != 'entity.node.canonical' || $operation != 'view')) {
    return AccessResult::forbidden();
  }

  return AccessResult::neutral();
}
